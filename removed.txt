	// Recipe Model

	removeIngredient: function(ingredient){
		var new_recipe_ingredients = [];
		_.each(this.attributes.recipe_ingredients, function(ri){
			if (_.values(ri)[0] != ingredient){
				new_recipe_ingredients.push(ri);
			}
		})
		this.attributes.recipe_ingredients = new_recipe_ingredients;
	},

	removeIngredients: function(ingredientList){
		var that = this;
		_.each(ingredientList, function(ingredient){
			that.removeIngredient(ingredient);
		});
	},

	updateName: function(new_name){
		this.set("dishname", new_name);
	}

		hasIngredient: function(name){
		if (this.attributes.recipe_ingredients.length > 0){
			_.each(this.attributes.recipe_ingredients, function(recipe_ingredient){
				if (_.has(_.values(recipe_ingredient), name) === true){ 
					return true;
				}		
			});
		}
		return false;
	},


	filterByName: function(ingredient_name){
		this.ingredients.filter(function(model){
			if (model.name == ingredient_name){
				return model;
			}
		})	
	},

	addIngredient: function(ingredient){
		// if the ingredients list is non-empty, look for duplicates
		if (this.hasIngredient(ingredient.name) === false){
			this.attributes.recipe_ingredients.push(ingredient); 
		}
		else { return false; } 
	},

	addIngredients: function(ingredientList){
		var that = this;
		_.each(ingredientList, function(ingredient){
			that.addIngredient(ingredient);
		})
		this.save();
		return this.attributes.recipe_ingredients;
	},

	calculateRating: function(){
		var sum = 0;
		var endorsements = this.attributes.endorsements;
		if(endorsements.length < 1){
			return null;
		} else {
			if (!this.attributes.rated){
				this.attributes.rated = true;
			}
			endorsements.forEach(function(endorsement){
				sum += endorsement.stars;
			});
			return sum/endorsements.length;
		}
	},


// Recipe Collection


	selectSearchOptions: function(options, attribute){
		
		if (options === "alphabetical"){
			this.sortAlphabetical();
		}
		if (options === "name"){
			this.searchByName(attribute)
		}
	},
